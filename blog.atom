<?xml version="1.0" encoding="utf-8" ?>
<feed xml:lang="en-US" xmlns="http://www.w3.org/2005/Atom">
  <id>http://debezium.io/</id>
  <title>Debezium Blog</title>
  <updated>2016-04-14T22:13:40+00:00</updated>
  <link href="/blog.atom" rel="self" type="application/atom+xml" />
  <link href="http://debezium.io/" rel="alternate" type="text/html" />
  <entry>
    <id>/blog/2016/04/15/parsing-ddl/</id>
    <title>Parsing DDL</title>
    <updated>2016-04-14T22:13:40+00:00</updated>
    <published>2016-04-15T00:00:00+00:00</published>
    <link href="/blog/2016/04/15/parsing-ddl/" rel="alternate" type="text/html" />
    <author>
      <name>Randall Hauch</name>
    </author>
    <category term="mysql"></category>
    <category term="sql"></category>
    <summary>
      
      
      
      When our MySQL connector is reading the binlog of a MySQL server or cluster, it parses the DDL statements in the log and builds an in-memory model of each table&#8217;s schema as it evolves over time. This process is important because the connector generates events for each table using the definition of the table at the time of each event. We can&#8217;t use the database&#8217;s current schema, since it may have changed since the point in time (or position in the log) where the connector is reading.
      
      
      Parsing DDL of MySQL or any other major relational database can seem to be...
    </summary>
    <content type="html">
      &lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When our &lt;a href=&quot;http://debezium.io/docs/connectors/mysql&quot;&gt;MySQL connector&lt;/a&gt; is reading the binlog of a MySQL server or cluster, it parses the DDL statements in the log and builds an in-memory model of each table’s schema as it evolves over time. This process is important because the connector generates events for each table using the definition of the table at the time of each event. We can’t use the database’s &lt;em&gt;current&lt;/em&gt; schema, since it may have changed since the point in time (or position in the log) where the connector is reading.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Parsing DDL of MySQL or any other major relational database can seem to be a daunting task. Usually each DBMS has a highly-customized SQL grammar, and although the &lt;em&gt;data manipulation language&lt;/em&gt; (DML) statements are often fairly close the standards, the &lt;em&gt;data definition language&lt;/em&gt; (DDL) statements are usually less so and involve more DBMS-specific features.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So given this, why did we write our own DDL parser for MySQL? Let’s first look at what Debezium needs a DDL parser to do.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_parsing_ddl_in_the_debezium_mysql_connector&quot;&gt;Parsing DDL in the Debezium MySQL connector&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The MySQL binlog contains various kinds of events. For example, when a row is inserted into a table, the binlog event contains an indirect reference to the table and the values for each column in the table, but there is no information about the columns that make up the table. The only thing in the binlog referencing table structures are SQL DDL statements that were generated by MySQL when it processed user-supplied DDL statements.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The connector also produces messages using Kafka Connect Schemas, which are simple data structures that define the various names and types of each field, and the way the fields are organized. So, when we generate an event message for the table insert, we first have to have a Kafka Connect &lt;code&gt;Schema&lt;/code&gt; object with all the appropriate fields, and then we have to convert the ordered array of column values into a Kafka Connect &lt;code&gt;Struct&lt;/code&gt; object using the fields and the individual column values in the table insert event.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Luckily, when we come across a DDL statement we can update our in-memory model and then use this to generate a &lt;code&gt;Schema&lt;/code&gt; object. At the same time, we can create a component that will use this &lt;code&gt;Schema&lt;/code&gt; object to create a &lt;code&gt;Struct&lt;/code&gt; object from the ordered array of column values that appear in the events. All of this can be done once and used for all row events on that table, until we come across another DDL statement that changes the table’s schema at which point we updated our model again.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;So all of this requires parsing all of the DDL statements, though for our purposes we only have to &lt;em&gt;understand&lt;/em&gt; a small subset of the DDL grammer. We then have to use that subset of statements to update our in-memory model of our tables. And since our in-memory table model is not specific to MySQL, the rest of the functionality to generate &lt;code&gt;Schema&lt;/code&gt; objects and components that convert an array of values into &lt;code&gt;Struct&lt;/code&gt; objects used in messages is all generic.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_existing_ddl_libraries&quot;&gt;Existing DDL libraries&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Unfortunately, there aren’t really that many 3rd party open source libraries for parsing DDL statements for MySQL, PostgreSQL, or other popular RDBMSes. &lt;a href=&quot;http://jsqlparser.sourceforge.net&quot;&gt;JSqlParser&lt;/a&gt; is often cited, but it has a &lt;em&gt;single grammar&lt;/em&gt; that is a combination of multiple DBMS grammars and therefore is not a strict parser for any specific DBMS. Adding support for other DBMSes by updating the composite grammar would likely be difficult.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Other libraries, such as &lt;a href=&quot;https://github.com/prestodb/presto/tree/master/presto-parser&quot;&gt;PrestoDB&lt;/a&gt;, define their own SQL grammar and are unable to handle the intracacies and nuances of the MySQL DDL grammar. The Antlr parser generator project has a &lt;a href=&quot;https://github.com/antlr/grammars-v4/tree/master/mysql&quot;&gt;grammar for MySQL 5.6&lt;/a&gt;, but this is limited to a small subset of DML and has no support for DDL or newer 5.7 features. There are &lt;a href=&quot;http://www.antlr3.org/grammar/list.html&quot;&gt;older SQL-related grammars for Antlr 3&lt;/a&gt;, but these are often massive, suffer from bugs, and limited to specific DBMSes. The &lt;a href=&quot;http://teiid.jboss.org&quot;&gt;Teiid project&lt;/a&gt; is a data virtualization engine that sits atop a wide variety of DBMSes and data sources, and it’s tooling has a series of &lt;a href=&quot;https://github.com/Teiid-Designer/teiid-modeshape&quot;&gt;DDL parsers&lt;/a&gt; that construct ASTs in a special repository (the author actually helped develop these). There are also Ruby libraries, like &lt;a href=&quot;https://github.com/square/mysql-parser&quot;&gt;Square’s MySQL Parser library&lt;/a&gt;. There is also a &lt;a href=&quot;http://www.sqlparser.com/sql-parser-java.php&quot;&gt;proprietary commercial product&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_our_ddl_parser_framework&quot;&gt;Our DDL parser framework&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Since we couldn’t find a useful 3rd party open source library, we chose to create our own DDL parser framework limited to our needs:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Parse DDL statements and update our in-memory model.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Focus on consuming those essential statements (e.g., create, alter, and drop tables and views), while completely ignoring other statements without having to parse them.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Structure the parser code similarly to the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/sql-syntax-data-definition.html&quot;&gt;MySQL DDL grammar documentation&lt;/a&gt; and use method names that mirror the rules in the grammar. This will make it easier to maintain over time.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Allow creation of parsers for PostgreSQL, Oracle, SQLServer, and other DBMSes as needed.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Support customization through subclassing: be able to easily override narrow portions of the logic without having to copy lots of code.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Make it easy to develop, debug, and test parsers.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The resulting framework includes a tokenizer that converts one or more DDL statements in a string into a rewindable sequence of tokens, where each token represents punctuation, quoted strings, case-insentivie words and symbols, numbers, keywords, comments, and terminating characters  (such as &lt;code&gt;;&lt;/code&gt; for MySQL). The DDL parser, then, walks the token stream looking for patterns using a simple and easy to read fluent API, calling methods on itself to process the various sets of tokens. The parser also uses an internal &lt;a href=&quot;https://github.com/debezium/debezium/blob/master/debezium-core/src/main/java/io/debezium/relational/ddl/DataTypeParser.java&quot;&gt;data type parser&lt;/a&gt; for processing SQL data type expressions, such as &lt;code&gt;INT&lt;/code&gt;, &lt;code&gt;VARCHAR(64)&lt;/code&gt;, &lt;code&gt;NUMERIC(32,3)&lt;/code&gt;, &lt;code&gt;TIMESTAMP(8) WITH TIME ZONE&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;a href=&quot;https://github.com/debezium/debezium/blob/master/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDdlParser.java&quot;&gt;MySqlDdlParser&lt;/a&gt; class extends a &lt;a href=&quot;https://github.com/debezium/debezium/blob/master/debezium-core/src/main/java/io/debezium/relational/ddl/DdlParser.java&quot;&gt;base class&lt;/a&gt; and provides all of the MySQL-specific parsing logic. For example, the DDL statements:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;# Create and populate our products using a single insert with many rows
      CREATE TABLE products (
        id INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        description VARCHAR(512),
        weight FLOAT
      );
      ALTER TABLE products AUTO_INCREMENT = 101;
      
      # Create and populate the products on hand using multiple inserts
      CREATE TABLE products_on_hand (
        product_id INTEGER NOT NULL PRIMARY KEY,
        quantity INTEGER NOT NULL,
        FOREIGN KEY (product_id) REFERENCES products(id)
      );&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;can be easily parsed with:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;String ddlStatements = ...
      DdlParser parser = new MySqlDdlParser();
      Tables tables = new Tables();
      parser.parse(ddl, tables);&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here, the &lt;code&gt;Tables&lt;/code&gt; object is our in-memory representation of our named table definitions. The parser processes the DDL statements, applying each to the appropriate table definition inside the &lt;code&gt;Tables&lt;/code&gt; object.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_how_it_works&quot;&gt;How it works&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Each &lt;code&gt;DdlParser&lt;/code&gt; implementation has the following public method that will parse the statements in the supplied String:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public final void parse(String ddlContent, Tables databaseTables) {
              Tokenizer tokenizer = new DdlTokenizer(!skipComments(), this::determineTokenType);
              TokenStream stream = new TokenStream(ddlContent, tokenizer, false);
              stream.start();
              parse(stream, databaseTables);
          }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here, the method creates a new &lt;code&gt;TokenStream&lt;/code&gt; from the content using a &lt;code&gt;DdlTokenizer&lt;/code&gt; that knows how to separate the characters in the string into the various typed token objects. It then calls another &lt;code&gt;parse&lt;/code&gt; method that does the bulk of the work:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    public final void parse(TokenStream ddlContent, Tables databaseTables)
                                 throws ParsingException, IllegalStateException {
              this.tokens = ddlContent;
              this.databaseTables = databaseTables;
              Marker marker = ddlContent.mark();
              try {
                  while (ddlContent.hasNext()) {
                      parseNextStatement(ddlContent.mark());
                      // Consume the statement terminator if it is still there ...
                      tokens.canConsume(DdlTokenizer.STATEMENT_TERMINATOR);
                  }
              } catch (ParsingException e) {
                  ddlContent.rewind(marker);
                  throw e;
              } catch (Throwable t) {
                  parsingFailed(ddlContent.nextPosition(),
                                &quot;Unexpected exception (&quot; + t.getMessage() + &quot;) parsing&quot;, t);
              }
          }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This sets up some local state, marks the current starting point, and tries to parse DDL statements until no more can be found. If the parsing logic fails to find a match, it generates a &lt;code&gt;ParsingException&lt;/code&gt; with the offending line and column plus a message signaling what was found and what was expected. In such cases, this method rewinds the token stream (in case the caller wishes to try an alternative different parser).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Each time the &lt;code&gt;parseNextStatement&lt;/code&gt; method is called, the starting position of that statement is passed into the method, giving it the starting position of the statement. Our &lt;code&gt;MySqlDdlParser&lt;/code&gt; subclass overrides the &lt;code&gt;parseNextStatement&lt;/code&gt; method to use the first token in the statement to determine the kinds of statement allowed in the MySQL DDL grammar:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
          protected void parseNextStatement(Marker marker) {
              if (tokens.matches(DdlTokenizer.COMMENT)) {
                  parseComment(marker);
              } else if (tokens.matches(&quot;CREATE&quot;)) {
                  parseCreate(marker);
              } else if (tokens.matches(&quot;ALTER&quot;)) {
                  parseAlter(marker);
              } else if (tokens.matches(&quot;DROP&quot;)) {
                  parseDrop(marker);
              } else if (tokens.matches(&quot;RENAME&quot;)) {
                  parseRename(marker);
              } else {
                  parseUnknownStatement(marker);
              }
          }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When a matching token is found, the method calls the appropriate method. For example, if the statement begins with &lt;code&gt;CREATE TABLE …​&lt;/code&gt;, then the &lt;code&gt;parseCreate&lt;/code&gt; method is called with the same marker that identifies the starting position of the statement:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    @Override
          protected void parseCreate(Marker marker) {
              tokens.consume(&quot;CREATE&quot;);
              if (tokens.matches(&quot;TABLE&quot;) || tokens.matches(&quot;TEMPORARY&quot;, &quot;TABLE&quot;)) {
                  parseCreateTable(marker);
              } else if (tokens.matches(&quot;VIEW&quot;)) {
                  parseCreateView(marker);
              } else if (tokens.matchesAnyOf(&quot;DATABASE&quot;, &quot;SCHEMA&quot;)) {
                  parseCreateUnknown(marker);
              } else if (tokens.matchesAnyOf(&quot;EVENT&quot;)) {
                  parseCreateUnknown(marker);
              } else if (tokens.matchesAnyOf(&quot;FUNCTION&quot;, &quot;PROCEDURE&quot;)) {
                  parseCreateUnknown(marker);
              } else if (tokens.matchesAnyOf(&quot;UNIQUE&quot;, &quot;FULLTEXT&quot;, &quot;SPATIAL&quot;, &quot;INDEX&quot;)) {
                  parseCreateIndex(marker);
              } else if (tokens.matchesAnyOf(&quot;SERVER&quot;)) {
                  parseCreateUnknown(marker);
              } else if (tokens.matchesAnyOf(&quot;TABLESPACE&quot;)) {
                  parseCreateUnknown(marker);
              } else if (tokens.matchesAnyOf(&quot;TRIGGER&quot;)) {
                  parseCreateUnknown(marker);
              } else {
                  // It could be several possible things (including more
                  // elaborate forms of those matches tried above),
                  sequentially(this::parseCreateView,
                               this::parseCreateUnknown);
              }
          }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Here, the method first consumes the token with the &lt;code&gt;CREATE&lt;/code&gt; literal, and then tries to match the tokens with various patterns of token literals. If a match is found, this method delegates to other more specific parsing methods. Note how the fluent API of the framework makes it quite easy to understand the match patterns.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Let’s go one step further. Assuming our DDL statement starts with &lt;code&gt;CREATE TABLE products (&lt;/code&gt;, then the parser will then invoke the &lt;code&gt;parseCreateTable&lt;/code&gt; method, again with the same marker denoting the start of the statement:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;    protected void parseCreateTable(Marker start) {
              tokens.canConsume(&quot;TEMPORARY&quot;);
              tokens.consume(&quot;TABLE&quot;);
              boolean onlyIfNotExists = tokens.canConsume(&quot;IF&quot;, &quot;NOT&quot;, &quot;EXISTS&quot;);
              TableId tableId = parseQualifiedTableName(start);
              if ( tokens.canConsume(&quot;LIKE&quot;)) {
                  TableId originalId = parseQualifiedTableName(start);
                  Table original = databaseTables.forTable(originalId);
                  if ( original != null ) {
                      databaseTables.overwriteTable(tableId, original.columns(),
                                                    original.primaryKeyColumnNames());
                  }
                  consumeRemainingStatement(start);
                  debugParsed(start);
                  return;
              }
              if (onlyIfNotExists &amp;amp;&amp;amp; databaseTables.forTable(tableId) != null) {
                  // The table does exist, so we should do nothing ...
                  consumeRemainingStatement(start);
                  debugParsed(start);
                  return;
              }
              TableEditor table = databaseTables.editOrCreateTable(tableId);
      
              // create_definition ...
              if (tokens.matches('(')) parseCreateDefinitionList(start, table);
              // table_options ...
              parseTableOptions(start, table);
              // partition_options ...
              if (tokens.matches(&quot;PARTITION&quot;)) {
                  parsePartitionOptions(start, table);
              }
              // select_statement
              if (tokens.canConsume(&quot;AS&quot;) || tokens.canConsume(&quot;IGNORE&quot;, &quot;AS&quot;)
                  || tokens.canConsume(&quot;REPLACE&quot;, &quot;AS&quot;)) {
                  parseAsSelectStatement(start, table);
              }
      
              // Update the table definition ...
              databaseTables.overwriteTable(table.create());
              debugParsed(start);
          }&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This method tries to mirror the &lt;a href=&quot;http://dev.mysql.com/doc/refman/5.7/en/create-table.html&quot;&gt;MySQL &lt;code&gt;CREATE TABLE&lt;/code&gt; grammar rules&lt;/a&gt;, which start with:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
          (create_definition,...)
          [table_options]
          [partition_options]
      
      CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
          [(create_definition,...)]
          [table_options]
          [partition_options]
          select_statement
      
      CREATE [TEMPORARY] TABLE [IF NOT EXISTS] tbl_name
          { LIKE old_tbl_name | (LIKE old_tbl_name) }
      
      create_definition:
          ...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;code&gt;CREATE&lt;/code&gt; literal was already consumed before our &lt;code&gt;parseCreateTable&lt;/code&gt; begins, so it first tries to consume the &lt;code&gt;TEMPORARY&lt;/code&gt; literal if available, the &lt;code&gt;TABLE&lt;/code&gt; literal, the &lt;code&gt;IF NOT EXISTS&lt;/code&gt; fragment if avaialble, and then consumes and parses the qualified name of the table. If the statement includes &lt;code&gt;LIKE otherTable&lt;/code&gt;, it uses the &lt;code&gt;databaseTables&lt;/code&gt; (which is the reference to our &lt;code&gt;Tables&lt;/code&gt; object) to overwrite the definition of the named table with that of the referenced table. Otherwise, it obtains an editor for the new table, and then (like the grammar rules) parses a list of &lt;em&gt;create_definition&lt;/em&gt; fragments, followed by &lt;em&gt;table_options&lt;/em&gt;, &lt;em&gt;partition_options&lt;/em&gt;, and possibly a &lt;em&gt;select_statement&lt;/em&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Take a look at the full &lt;a href=&quot;https://github.com/debezium/debezium/blob/master/debezium-connector-mysql/src/main/java/io/debezium/connector/mysql/MySqlDdlParser.java&quot;&gt;MySqlDdlParser&lt;/a&gt; class to see far more details.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;_wrap_up&quot;&gt;Wrap up&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This post goes into some detail about why the MySQL connector uses the DDL statements in the binlog, though we only scratched the surface about &lt;em&gt;how&lt;/em&gt; the connector does the DDL parsing with its framework, and how that can be reused in future parsers for other DBMS dialects.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Try our &lt;a href=&quot;http://debezium.io/docs/tutorial&quot;&gt;tutorial&lt;/a&gt; to see the MySQL connector in action, and stay tuned for more connectors, releases, and news.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>/blog/2016/04/14/Debezium-website/</id>
    <title>Debezium Website</title>
    <updated>2016-04-14T22:13:40+00:00</updated>
    <published>2016-04-14T00:00:00+00:00</published>
    <link href="/blog/2016/04/14/Debezium-website/" rel="alternate" type="text/html" />
    <author>
      <name>Randall Hauch</name>
    </author>
    <category term="website"></category>
    <summary>
      
      As you may have noticed, we have a new website with documentation, a blog, and information about the Debezium community and how you can contribute. Let us know what you think, and contribute improvements.
      ...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As you may have noticed, we have a &lt;a href=&quot;http://debezium.io&quot;&gt;new website&lt;/a&gt; with &lt;a href=&quot;http://debezium.io/docs&quot;&gt;documentation&lt;/a&gt;, a &lt;a href=&quot;http://debezium.io/blog&quot;&gt;blog&lt;/a&gt;, and information about the &lt;a href=&quot;http://debezium.io/community&quot;&gt;Debezium community&lt;/a&gt; and how you can &lt;a href=&quot;http://debezium.io/docs/contribute&quot;&gt;contribute&lt;/a&gt;. Let us know what you think, and &lt;a href=&quot;http://debezium.io/docs/contribute&quot;&gt;contribute improvements&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
  <entry>
    <id>/blog/2016/03/18/Debezium-0-1-Released/</id>
    <title>Debezium 0.1 Released</title>
    <updated>2016-04-14T22:13:40+00:00</updated>
    <published>2016-03-18T00:00:00+00:00</published>
    <link href="/blog/2016/03/18/Debezium-0-1-Released/" rel="alternate" type="text/html" />
    <author>
      <name>Randall Hauch</name>
    </author>
    <category term="releases"></category>
    <category term="mysql"></category>
    <category term="docker"></category>
    <summary>
      
      Debezium is a distributed platform that turns your existing databases into event streams, so applications can see and respond almost instantly to each committed row-level change in the databases. Debezium is built on top of Kafka and provides Kafka Connect compatible connectors that monitor specific database management systems. Debezium records the history of data changes in Kafka logs, so your application can be stopped and restarted at any time and can easily consume all of the events it missed while it was not running, ensuring that all events are processed correctly and completely. Debezium is open source under the Apache...
    </summary>
    <content type="html">
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Debezium is a distributed platform that turns your existing databases into event streams, so applications can see and respond almost instantly to each committed row-level change in the databases. Debezium is built on top of &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;Kafka&lt;/a&gt; and provides &lt;a href=&quot;http://kafka.apache.org/documentation.html#connect&quot;&gt;Kafka Connect&lt;/a&gt; compatible connectors that monitor specific database management systems. Debezium records the history of data changes in Kafka logs, so your application can be stopped and restarted at any time and can easily consume all of the events it missed while it was not running, ensuring that all events are processed correctly and completely. Debezium is &lt;a href=&quot;http://debezium.io/license&quot;&gt;open source&lt;/a&gt; under the &lt;a href=&quot;http://www.apache.org/licenses/LICENSE-2.0.html&quot;&gt;Apache License, Version 2.0&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Now the good news — &lt;strong&gt;&lt;em&gt;Debezium 0.1 is now available&lt;/em&gt;&lt;/strong&gt; and includes several significant features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A &lt;a href=&quot;http://debezium.io/docs/connectors/mysql&quot;&gt;connector for MySQL&lt;/a&gt; to monitor MySQL databases. It’s a Kafka Connect source connector, so simply install it into a Kafka Connect service (see below) and use the service’s REST API to configure and manage connectors to each DBMS server. The connector reads the MySQL binlog and generates data change events for every committed row-level modification in the monitored databases. The MySQL connector generates events based upon the tables' structure at the time the row is changed, and it automatically handles changes to the table structures.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A small library so applications can &lt;a href=&quot;http://debezium.io/docs/embedded&quot;&gt;embed any Kafka Connect connector&lt;/a&gt; and consume data change events read directly from the source system. This provides a much lighter weight system (since Zookeeper, Kafka, and Kafka Connect services are not needed), but as a consequence is not as fault tolerant or reliable since the application must maintain state normally kept inside Kafka’s distributed and replicated logs. Thus the application becomes completely responsible for managing all state.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Although Debezium is really intended to be used as turnkey services, all of Debezium’s JARs and other artifacts are available in &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.debezium%22&quot;&gt;Maven Central&lt;/a&gt;. Detailed information about the features, tasks, and bugs are outlined in our release notes.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To make it easier to use a Debezium’s connector inside your own Kafka Connect service, we created a plugin archive (in both zip and tar.gz formats) that includes all JARs used by the connector not already included in Kafka Connect 0.9.0.1. Simply download, extract to your Kafka Connect 0.9.0.1 installation, and add all of the JARs to the service’s classpath. Once the service is restarted, you can then use the REST API to configure and manage connector instances that monitor the databases of your choice. &lt;a href=&quot;http://search.maven.org/#artifactdetails%7Cio.debezium%7Cdebezium-connector-mysql%7C0.1.0%7Cjar&quot;&gt;MySQL connector plugin archive&lt;/a&gt; is located in Maven Central, so it’s even possible to use Maven to build a customized Kafka Connect service. We’ll generate these plugins for future connectors, too.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Debezium platform has a lot of moving parts in Zookeeper, Kafka, and Kafka Connect. To make it much easier for you to try it out and play with it, we created &lt;a href=&quot;https://hub.docker.com/u/debezium/&quot;&gt;Docker images&lt;/a&gt; and a &lt;a href=&quot;http://debezium.io/docs/tutorial&quot;&gt;tutorial&lt;/a&gt; that walks you through using Debezium. First, it has you use Docker to start a container for each of these services and a MySQL server with an example &quot;inventory&quot; database. It shows you how to use the RESTful API to register a connector to monitor the inventory database, how to watch the streams of data changes for various tables, and how changing the database produces new change events with very low latency. It also walks you through shutting down the Kafka Connect service, changing data while the service is not monitoring the database, and then restarting the Kafka Connect service to see how all of the data changes that occurred while the service was not running are still captured correctly in the streams. This tutorial really is a great way to interactively learn the basics of Debezium and change data capture.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;We hope you find Debezium interesting and useful, and want to give it a try. Follow us on Twitter &lt;a href=&quot;https://twitter.com/debezium&quot;&gt;@debezium&lt;/a&gt;, &lt;a href=&quot;https://gitter.im/debezium/user&quot;&gt;chat with us on Gitter&lt;/a&gt;, or join our &lt;a href=&quot;https://groups.google.com/forum/#!forum/debezium&quot;&gt;mailing list&lt;/a&gt; to talk with the community. All of the code is open source &lt;a href=&quot;https://github.com/debezium/&quot;&gt;on GitHub&lt;/a&gt;, so build the code locally and help us improve the MySQL connector and add more connectors. If you find problems or have ideas how we can improve Debezium, please let us know or &lt;a href=&quot;https://issues.jboss.org/projects/DBZ/issues/&quot;&gt;log an issue&lt;/a&gt;. We plan to release 0.2 very soon with at least one additional connector.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thanks to Emmanuel, Chris, Akshath, James, and Paul for their help with the release, questions, and discussions!&lt;/p&gt;
      &lt;/div&gt;
    </content>
  </entry>
</feed>
